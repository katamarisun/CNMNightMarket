
// transform object vertices to world-space:
uniform mat4 gWorldXf : World < string UIWidget="None"; >;

// transform object normals, tangents, & binormals to world-space:
uniform mat4 gWorldITXf : WorldInverseTranspose < string UIWidget="None"; >;

// transform object vertices to view space and project them in perspective:
uniform mat4 gWvpXf : WorldViewProjection < string UIWidget="None"; >;

// provide tranform from "view" or "eye" coords back to world-space:
uniform mat4 gViewIXf : ViewInverse < string UIWidget="None"; >;


uniform     bool MayaHwFogEnabled : HardwareFogEnabled < string UIWidget = "None"; > = false; 
uniform     int MayaHwFogMode : HardwareFogMode < string UIWidget = "None"; > = 0; 
uniform     float MayaHwFogStart : HardwareFogStart < string UIWidget = "None"; > = 0.0; 
uniform     float MayaHwFogEnd : HardwareFogEnd < string UIWidget = "None"; > = 100.0; 
uniform     float MayaHwFogDensity : HardwareFogDensity < string UIWidget = "None"; > = 0.1; 
uniform     vec4 MayaHwFogColor : HardwareFogColor < string UIWidget = "None"; > = { 0.5, 0.5, 0.5, 1.0 }; 


uniform float4x4 viewPrj : ViewProjection < string UIWidget = "None"; >;

uniform float4x4 view : View < string UIWidget = "None"; >;

/*** TWEAKABLES *********************************************/

uniform bool use_presence
<
    string UIName = "Use Presence Map";
    string UIGroup = "Appearance";
>
    = 0.0;


uniform texture2D presence_map <
    string ResourceName = "";
    string ResourceType = "2D";
    // string UIWidget = "None";
    string UIDesc = "Presence Map";
    string UIGroup = "Appearance";
>;

uniform sampler2D presence_sampler
    = sampler_state {
    Texture = <presence_map>;
};

uniform float masterOpacity
<
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName = "Master Opacity";
    string UIGroup = "Appearance";
> = 1.0;

uniform bool use_opacity
<
    string UIName = "Use Opacity Map";
    string UIGroup = "Appearance";
> = 0.0;


uniform texture2D opacity_map <
    string ResourceName = "";
    string ResourceType = "2D";
    // string UIWidget = "None";
    string UIDesc = "Opacity Map";
    string UIGroup = "Appearance";
>;

uniform sampler2D opacity_sampler
    = sampler_state {
    Texture = <opacity_map>;
};

uniform float cutoff
<
    string UIWidget = "slider";
    float UIMin = -4.0;
    float UIMax = 4.0;
    float UIStep = 0.01;
    string UIName = "Normal Cutoff";
    string UIGroup = "Lantern Colors";
> = 0.911;

uniform float softness
<
    string UIWidget = "slider";
    float UIMin = 0.00;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName = "Edge Softness";
    string UIGroup = "Lantern Colors";
> = 0.031;


uniform int compMode
<
    string UIName = "Compositing Mode";
    string UIGroup = "Compositing Controls";
    string UIFieldNames = "Normal Pass:Key Mask:Fill Mask:Gradient 1 Mask:Rim Mask:Specular:Normals:Depth";
> = 0;

uniform float globalValueTweak
<
    string UIWidget = "slider";
    float UIMin = -1.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName = "Global Value Tweak";
    string UIGroup = "Compositing Controls";
> = 0.0;

uniform float globalHueTweak
<
    string UIWidget = "slider";
    float UIMin = -1.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName = "Global Hue Tweak";
    string UIGroup = "Compositing Controls";
> = 0.0;

uniform float globalSaturationTweak
<
    string UIWidget = "slider";
    float UIMin = -1.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName = "Global Saturation Tweak";
    string UIGroup = "Compositing Controls";
> = 0.0;

uniform float globalBrightness
<
    string UIWidget = "slider";
    float UIMin = -1.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName = "Global Brightness Tweak";
    string UIGroup = "Compositing Controls";
> = 0.0;

uniform float globalContrast
<
    string UIWidget = "slider";
    float UIMin = -1.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName = "Global Contrast Tweak";
    string UIGroup = "Compositing Controls";
> = 0.0;

uniform vec4 matID
<
    string UIName = "matID";
    string UIWidget = "Color";
    string UIGroup = "Compositing Controls";
> = {0.0, 0.0, 0.0, 1.0f};

uniform float eyeDirFudge
<
    string UIWidget = "slider";
    float UIMin = 0.00;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName = "Fudge Eye Direction";
    string UIGroup = "Fudge Factors";
> = 0.1;

uniform float darkenFudge
<
    string UIWidget = "slider";
    float UIMin = 0.00;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName = "Fudge Darken";
    string UIGroup = "Fudge Factors";
> = 0.17;

uniform float fudgeHotSpot
<
    string UIWidget = "slider";
    float UIMin = 0.00;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName = "Cuttoff to See HotSpot";
    string UIGroup = "Fudge Factors";
> = 0.1;

uniform float brightSpot
<
    string UIWidget = "slider";
    float UIMin = 0.00;
    float UIMax = 300.0;
    float UIStep = 0.01;
    string UIName = "Bright Spot Power";
    string UIGroup = "Lantern Colors";
> = 83.297;

uniform vec4 hotColor
<
    string UIName = "Hotspot Color";
    string UIWidget = "Color";
    string UIGroup = "Lantern Colors";
> = {1.0, 0.84, 0.35, 1.0f};

uniform vec4 middleColor
<
    string UIName = "Middle Color";
    string UIWidget = "Color";
    string UIGroup = "Lantern Colors";
> = {0.82, 0.54, 0.0, 1.0f};

uniform vec4 outerColor
<
    string UIName = "Outer Color";
    string UIWidget = "Color";
    string UIGroup = "Lantern Colors";
> = {0.58, 0.0, 0.0, 1.0f};


uniform bool use_tex
<
    string UIName = "Toggle Texture";
    string UIGroup = "Base Color";
> = 0.0;

uniform texture2D diffuseColorTex <
    string ResourceName = "";
    string ResourceType = "2D";
    // string UIWidget = "None";
    string UIDesc = "Diffuse Texture";
    string UIGroup = "Base Color";
>;

uniform sampler2D diffuseSampler
    = sampler_state {
    Texture = <diffuseColorTex>;
};


uniform vec4 diffuseColor
    <
    string UIName = "Diffuse Color";
    string UIWidget = "Color";
    string UIGroup = "Base Color";
> = {0.5, 0.5, 0.5, 1.0f};


attribute appdata {
    vec3 Position    : POSITION;
    vec2 UV        : TEXCOORD0;
    vec3 Normal    : NORMAL;
};

/* data passed from vertex shader to pixel shader */
attribute cellVertexOutput {
    vec3 WorldNormal    : TEXCOORD1;
    vec3 WorldEyeVec    : TEXCOORD2;
    vec4 ObjPos    : TEXCOORD3;
    vec2 fUV : TEXCOORD4;
    vec3 fPos : TEXCOORD5;
    vec3 FogFactor : TEXCOORD6;
};

/* data passed from vertex shader to pixel shader */
attribute cellPixelInput {
    vec3 WorldNormal    : TEXCOORD1;
    vec3 WorldEyeVec    : TEXCOORD2;
    vec4 ObjPos    : TEXCOORD3;
    vec2 fUV : TEXCOORD4;
    vec3 fPos : TEXCOORD5;
    vec3 FogFactor : TEXCOORD6;
};

/* data output by the fragment shader */
attribute pixelOut 
{
    vec4 colorOut:COLOR0;
}

GLSLShader VS
{
	void main(void)
	{
        vec3 Nw = normalize((gWorldITXf * vec4(Normal,0.0)).xyz);
        WorldNormal = Nw;
        vec4 Po = vec4(Position.xyz,1);
        vec3 Pw = (gWorldXf*Po).xyz;
        vec4 _HPosition = mul( viewPrj, vec4(Pw.xyz, 1) ); 
        float fogFactor = 0.0; 
        if (MayaHwFogMode == 0) { 
                    fogFactor = saturate((MayaHwFogEnd - _HPosition.z) / (MayaHwFogEnd - MayaHwFogStart)); 
        } 
        else if (MayaHwFogMode == 1) { 
                    fogFactor = 1.0 / (exp(_HPosition.z * MayaHwFogDensity)); 
        } 
        else if (MayaHwFogMode == 2) { 
                    fogFactor = 1.0 / (exp(pow(_HPosition.z * MayaHwFogDensity, 2))); 
        } 
        FogFactor = vec3(fogFactor, fogFactor, fogFactor); 

        WorldEyeVec = normalize(gViewIXf[3].xyz - Pw);
        fUV = vec2(UV.x, 1.0-UV.y);
        fPos = Position;
        gl_Position = gWvpXf * Po;
	}
}


GLSLShader FS
{

	float calc_alpha( float softness, float cutoff, float cos );
    float blendOverlay(float base, float blend);
    vec4 blendOverlay(vec4 base, vec4 blend);
    vec4 blendOverlay(vec4 base, vec4 blend, float opacity);
    vec4 brightnessContrast(vec4 value, float brightness, float contrast);
    vec4 hsvadjust ( vec4 inColor, float hue_tweak, float sat_tweak, float value_tweak );

	void main(void)
	{

        vec4 surfaceColor = diffuseColor;
        if (use_tex) {
            surfaceColor = texture2D(diffuseSampler, fUV);
        }
        surfaceColor = brightnessContrast ( surfaceColor, globalBrightness, 1.0 + globalContrast);
        surfaceColor = hsvadjust ( surfaceColor, globalHueTweak, globalSaturationTweak, globalValueTweak );
        vec4 base_color = surfaceColor;

		float cos = abs(dot( normalize(WorldNormal), normalize(WorldEyeVec - vec3(0.0, eyeDirFudge, 0.0)) ));
		float alphaOuter = calc_alpha( softness, cutoff, cos );
        float alphaMiddle = calc_alpha( softness, cutoff / 2, cos );
		vec4 gradientOuter = alphaOuter * outerColor;
        vec4 gradientMiddle = alphaMiddle * middleColor;

        float dodgeLerpFactor = 1.0;
        if (base_color.r < fudgeHotSpot) {
            dodgeLerpFactor = base_color.r;
        }
        vec4 colorDodge = lerp( base_color, saturate(hotColor + base_color), dodgeLerpFactor);

        vec4 colorOverlay = blendOverlay(base_color, gradientOuter, base_color.r);
        colorOverlay = blendOverlay(colorOverlay, gradientMiddle, base_color.r);

        colorOut = lerp(colorOverlay, colorDodge, pow(cos, brightSpot));
        colorOut = vec4(vec3(colorOut), masterOpacity);

        if (compMode >= 1) {
            if (compMode == 1) {
                colorOut = vec4(vec3(0.0), 1.0);
            }
            if (compMode == 2) {
                colorOut = vec4(vec3(0.0), 1.0);
            }
            if (compMode == 3) {
                colorOut = vec4(vec3(0.0), 1.0);
            }
            if (compMode == 4) {
                colorOut = vec4(vec3(0.0), 1.0);
            }
            if (compMode == 5) {
                colorOut = vec4(vec3(0.0), 1.0);
            }
            if (compMode == 6) {
                colorOut = vec4(vec3(0.0), 1.0);
            }
            if (compMode == 7) {
                colorOut = vec4(matID, 1.0);
            }
            if (compMode == 8) {
                colorOut = vec4(WorldNormal, 1.0);
            }
            if (compMode == 9) {
                colorOut = vec4(vec3(FogFactor), 1.0);
            }
            else {
                colorOut = vec4(vec3(0.0), 1.0);
            }
        }
	}

	float calc_alpha( float softness, float cutoff, float cos )
	{
	    float lower_bound = cutoff - softness;
	    float upper_bound = cutoff + softness;
	    float result_alpha = 0;
	    if (cos < lower_bound) {
	        result_alpha = 0.0;
	    } else {
	        if (cos > upper_bound) {
	            result_alpha = 1.0;
	        } else {
	            result_alpha = ( cos - lower_bound ) / ( 2 * softness );
	        }
	    }
	    return result_alpha;
	}

    vec4 blendOverlay(vec4 base, vec4 blend, float opacity) {
        return (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));
    }

    vec4 blendOverlay(vec4 base, vec4 blend) {
        return vec4(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b), 1.0);
    }

    float blendOverlay(float base, float blend) {
        return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));
    }


    // ------------------------------------------------- Brightness Contrast Adjustment -------------------------
    vec4 brightnessContrast(vec4 value, float brightness, float contrast)
    {
        return vec4((value.rgb - 0.5) * contrast + 0.5 + brightness, 1.0);
    }

    // ------------------------------------------------- HSV adjustment functions -------------------------------

    // All components are in the range [0…1], including hue.
    vec3 rgb2hsv(vec3 c)
    {
        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

        float d = q.x - min(q.w, q.y);
        float e = 1.0e-10;
        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
    }

    // All components are in the range [0…1], including hue.
    vec3 hsv2rgb(vec3 c)
    {
        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
    }

    vec4 hsvadjust ( vec4 inColor, float hue_tweak, float sat_tweak, float value_tweak ) {
        vec3 hsv = rgb2hsv(inColor.rgb);
        hsv = hsv + vec3(hue_tweak, sat_tweak, value_tweak);
        return vec4(hsv2rgb(hsv), inColor.a);
    }

}

technique main
{
	pass light_color
	<
		string drawContext = "colorPass";
	>
	{
        VertexShader (in appdata, out cellVertexOutput) = VS;
        PixelShader (in cellVertexOutput, out pixelOut) = FS;
	}

}

