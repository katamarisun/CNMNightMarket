//**********
//	This skeleton OGSFX file illustrates one potential way of
//	dealing with GLSL files that are to be shared between a 
//	pure OpenGL application and the glslShader:
//

// Tell included shaders to use OGSFX semantics and streams:
#define OGSFX 1

//**********
//	Uniform parameter handling:
//
//	Loads the uniforms from all shader stage files
//

#define HIDE_OGSFX_UNIFORMS 0
#define HIDE_OGSFX_STREAMS 1
#define HIDE_OGSFX_CODE 1

#include "hair.glslv"
#include "hair.glslf"

//**********
//	Input stream handling:
//
//	Loads the attribute streams from all shader stage files
//

#define HIDE_OGSFX_UNIFORMS 1
#define HIDE_OGSFX_STREAMS 0
#define HIDE_OGSFX_CODE 1

#include "hair.glslv"
#include "hair.glslf"

//**********
//	Code handling:
//
//	We need to load the vertex stage and fragment stage in two
//	different GLSLShader blocks in order to specify them in the
//	technique definition below:
//

#define HIDE_OGSFX_UNIFORMS 1
#define HIDE_OGSFX_STREAMS 1
#define HIDE_OGSFX_CODE 0

// Vertex shader.
GLSLShader hairVS
{
#include "hair.glslv"
}

// Vertex shader.
GLSLShader hairFS
{
#include "hair.glslf"
}

technique hair
{
	pass P1
	<
		string drawContext = "colorPass";
	>
	{
        VertexShader (in hairappdata, out haircellVertexOutput) = hairVS;
        PixelShader (in haircellVertexOutput, out pixelOut) = hairFS;
	}

}