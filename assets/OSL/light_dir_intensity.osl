shader light_dir_intensity(
	point key_pos = point(0) [[int lockgeom=0, int slider=1]],
	point rim_pos = point(0) [[int lockgeom=0, int slider=1]],
	float key_size = 0 [[int lockgeom=0, int slider=1]],
	float rim_size = 0 [[int lockgeom=0, int slider=1]],
	float rim_cutoff = 0 [[int lockgeom=0, int slider=1]],
	color key_shadow = color(0) [[int lockgeom=0]],
	color key_light = color(0) [[int lockgeom=0]],
	color rim = color(0) [[int lockgeom=0]],
	output color overlayColor = color(0),
	output float rimMask = 0,
	output float keyMask = 0,
)
{
	vector key_dir = normalize(vector(key_pos - P));
	float key_intensity = dot(key_dir, N);

	vector rim_dir = normalize(vector(rim_pos - P));
	float rim_intensity = dot(rim_dir, N);

	float facing_angle = dot( I, N);
	facing_angle = abs(facing_angle);

	if ( rim_intensity >= (1 - rim_size) && facing_angle <= (30*rim_cutoff) ) {
		overlayColor = rim;
		rimMask = 1;
	} else {
		if (key_intensity <= (1 - key_size)) {
			overlayColor = key_shadow;
			keyMask = 0;
		} else {
			overlayColor = key_light;
			keyMask = 1;
		}
	}
}